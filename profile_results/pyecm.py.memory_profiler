test
17
5070721
5882353
19721061166646717498359681
Filename: pyecm.py

Line #    Mem usage    Increment   Line Contents
================================================
    76                             	@profile
    77                             	def invert(a, b):
    78                             		'''Computes the inverse of a modulo b. b must be odd.
    79                             
    80    12.516 MB     0.000 MB   Returns the inverse of a (mod b).'''
    81   126.168 MB   113.652 MB   		if a == 0 or b == 0:
    82                             			return 0
    83                             
    84   126.168 MB     0.000 MB   		truth = False
    85   126.168 MB     0.000 MB   		if a < 0:
    86                             			truth = True
    87                             			a = -a
    88                             
    89   126.168 MB     0.000 MB   		b_orig = b
    90   126.168 MB     0.000 MB   		alpha = 1
    91    50.234 MB   -75.934 MB   		beta = 0
    92                             
    93   125.723 MB    75.488 MB   		while not a & 1:
    94   125.723 MB     0.000 MB   			if alpha & 1:
    95   124.188 MB    -1.535 MB   				alpha += b_orig
    96   125.723 MB     1.535 MB   			alpha >>= 1
    97   123.461 MB    -2.262 MB   			a >>= 1
    98                             
    99   126.168 MB     2.707 MB   		if b > a:
   100   126.168 MB     0.000 MB   			a, b = b, a
   101    12.523 MB  -113.645 MB   			alpha, beta = beta, alpha
   102                             
   103   126.207 MB   113.684 MB   		while b != 0 and a != b:
   104   126.207 MB     0.000 MB   			a -= b
   105    19.395 MB  -106.812 MB   			alpha -= beta
   106                             
   107   126.207 MB   106.812 MB   			while not a & 1:
   108   126.203 MB    -0.004 MB   				if alpha & 1:
   109    45.086 MB   -81.117 MB   					alpha += b_orig
   110   126.207 MB    81.121 MB   				alpha >>= 1
   111   126.207 MB     0.000 MB   				a >>= 1
   112                             			
   113   126.203 MB    -0.004 MB   			if b > a:
   114   126.203 MB     0.000 MB   				a,b = b,a
   115   126.207 MB     0.004 MB   				alpha, beta = beta, alpha
   116                             
   117   126.207 MB     0.000 MB   		if a == b:
   118   126.207 MB     0.000 MB   			a -= b
   119   126.207 MB     0.000 MB   			alpha -= beta
   120   126.207 MB     0.000 MB   			a, b = b, a
   121   126.207 MB     0.000 MB   			alpha, beta = beta, alpha
   122                             
   123   126.207 MB     0.000 MB   		if a != 1:
   124   126.207 MB     0.000 MB   			return 0
   125    12.523 MB  -113.684 MB   
   126   125.750 MB   113.227 MB   		if truth:
   127                             			alpha = b_orig - alpha
   128                             		
   129   125.750 MB     0.000 MB   		return alpha


Filename: pyecm.py

Line #    Mem usage    Increment   Line Contents
================================================
   538                             @profile
   539                             def parallel_invert(l, n):
   540                             	'''Inverts all elements of a list modulo some number, using 3(n-1) modular multiplications and one inversion.
   541                             
   542    12.516 MB     0.000 MB   Returns the list with all elements inverted modulo 3(n-1).'''
   543    12.523 MB     0.008 MB   	l_ = l[:]
   544   126.168 MB   113.645 MB   	for i in xrange(len(l)-1):
   545   126.168 MB     0.000 MB   		l[i+1] = (l[i] * l[i+1]) % n
   546                             	
   547   126.207 MB     0.039 MB   	inv = invert(l[-1], n)
   548   126.207 MB     0.000 MB   	if inv == 0:
   549   126.207 MB     0.000 MB   		return gcd(l[-1], n)
   550    12.516 MB  -113.691 MB   
   551   125.859 MB   113.344 MB   	for i in xrange(len(l)-1, 0, -1):
   552   125.859 MB     0.000 MB   		l[i] = (inv * l[i-1]) % n
   553   125.859 MB     0.000 MB   		inv = (inv * l_[i]) % n
   554   125.859 MB     0.000 MB   	l[0] = inv
   555                             
   556   125.859 MB     0.000 MB   	return l


Filename: pyecm.py

Line #    Mem usage    Increment   Line Contents
================================================
   431                             @profile
   432                             def double(p, n):
   433                             	'''Doubles each point in the input list. Much like the add function, we take advantage of fast inversion.
   434                             
   435    12.520 MB     0.000 MB   Returns the doubled list.'''
   436    12.523 MB     0.004 MB   	inv = range(len(p))
   437                             
   438   125.641 MB   113.117 MB   	for i in xrange(len(p)):
   439   125.645 MB     0.004 MB   		inv[i] = p[i][1] << 1
   440                             
   441   125.859 MB     0.215 MB   	inv = parallel_invert(inv, n)
   442                             
   443    12.523 MB  -113.336 MB   	if not isinstance(inv, list):
   444                             		return inv
   445                             
   446   126.086 MB   113.562 MB   	for i in xrange(len(p)):
   447   126.086 MB     0.000 MB   		x = p[i][0]
   448   126.086 MB     0.000 MB   		m = (x * x) % n
   449   126.086 MB     0.000 MB   		m = ((m + m + m + p[i][2]) * inv[i]) % n
   450   126.086 MB     0.000 MB   		p[i][0] = (m * m - x - x) % n
   451   126.086 MB     0.000 MB   		p[i][1] = (m * (x - p[i][0]) - p[i][1]) % n
   452                             
   453   126.086 MB     0.000 MB   	return p


