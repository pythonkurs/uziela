Timer unit: 1e-06 s

File: pyecm.py
Function: invert at line 76
Total time: 0.310208 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    76                                           	@profile
    77                                           	def invert(a, b):
    78                                           		'''Computes the inverse of a modulo b. b must be odd.
    79                                           
    80                                           Returns the inverse of a (mod b).'''
    81       230          238      1.0      0.1  		if a == 0 or b == 0:
    82                                           			return 0
    83                                           
    84       230          166      0.7      0.1  		truth = False
    85       230          172      0.7      0.1  		if a < 0:
    86                                           			truth = True
    87                                           			a = -a
    88                                           
    89       230          149      0.6      0.0  		b_orig = b
    90       230          165      0.7      0.1  		alpha = 1
    91       230          141      0.6      0.0  		beta = 0
    92                                           
    93       424          382      0.9      0.1  		while not a & 1:
    94       194          150      0.8      0.0  			if alpha & 1:
    95       112          110      1.0      0.0  				alpha += b_orig
    96       194          154      0.8      0.0  			alpha >>= 1
    97       194          172      0.9      0.1  			a >>= 1
    98                                           
    99       230          171      0.7      0.1  		if b > a:
   100       230          164      0.7      0.1  			a, b = b, a
   101       230          176      0.8      0.1  			alpha, beta = beta, alpha
   102                                           
   103     24834        20941      0.8      6.8  		while b != 0 and a != b:
   104     24604        19543      0.8      6.3  			a -= b
   105     24604        19574      0.8      6.3  			alpha -= beta
   106                                           
   107     73584        63475      0.9     20.5  			while not a & 1:
   108     48980        41239      0.8     13.3  				if alpha & 1:
   109     25106        20526      0.8      6.6  					alpha += b_orig
   110     48980        42681      0.9     13.8  				alpha >>= 1
   111     48980        40847      0.8     13.2  				a >>= 1
   112                                           			
   113     24604        18300      0.7      5.9  			if b > a:
   114     13156         9511      0.7      3.1  				a,b = b,a
   115     13156         9659      0.7      3.1  				alpha, beta = beta, alpha
   116                                           
   117       230          179      0.8      0.1  		if a == b:
   118       230          186      0.8      0.1  			a -= b
   119       230          196      0.9      0.1  			alpha -= beta
   120       230          168      0.7      0.1  			a, b = b, a
   121       230          176      0.8      0.1  			alpha, beta = beta, alpha
   122                                           
   123       230          188      0.8      0.1  		if a != 1:
   124         1            1      1.0      0.0  			return 0
   125                                           
   126       229          167      0.7      0.1  		if truth:
   127                                           			alpha = b_orig - alpha
   128                                           		
   129       229          141      0.6      0.0  		return alpha

File: pyecm.py
Function: double at line 431
Total time: 0.888278 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   431                                           @profile
   432                                           def double(p, n):
   433                                           	'''Doubles each point in the input list. Much like the add function, we take advantage of fast inversion.
   434                                           
   435                                           Returns the doubled list.'''
   436       208          369      1.8      0.0  	inv = range(len(p))
   437                                           
   438     19136        13798      0.7      1.6  	for i in xrange(len(p)):
   439     18928        18637      1.0      2.1  		inv[i] = p[i][1] << 1
   440                                           
   441       208       698630   3358.8     78.6  	inv = parallel_invert(inv, n)
   442                                           
   443       208          223      1.1      0.0  	if not isinstance(inv, list):
   444                                           		return inv
   445                                           
   446     19136        14448      0.8      1.6  	for i in xrange(len(p)):
   447     18928        15456      0.8      1.7  		x = p[i][0]
   448     18928        25197      1.3      2.8  		m = (x * x) % n
   449     18928        33723      1.8      3.8  		m = ((m + m + m + p[i][2]) * inv[i]) % n
   450     18928        31427      1.7      3.5  		p[i][0] = (m * m - x - x) % n
   451     18928        36213      1.9      4.1  		p[i][1] = (m * (x - p[i][0]) - p[i][1]) % n
   452                                           
   453       208          157      0.8      0.0  	return p

File: pyecm.py
Function: parallel_invert at line 538
Total time: 0.690374 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   538                                           @profile
   539                                           def parallel_invert(l, n):
   540                                           	'''Inverts all elements of a list modulo some number, using 3(n-1) modular multiplications and one inversion.
   541                                           
   542                                           Returns the list with all elements inverted modulo 3(n-1).'''
   543       230          266      1.2      0.0  	l_ = l[:]
   544     20930        14272      0.7      2.1  	for i in xrange(len(l)-1):
   545     20700        31031      1.5      4.5  		l[i+1] = (l[i] * l[i+1]) % n
   546                                           	
   547       230       572634   2489.7     82.9  	inv = invert(l[-1], n)
   548       230          199      0.9      0.0  	if inv == 0:
   549         1          304    304.0      0.0  		return gcd(l[-1], n)
   550                                           
   551     20839        14863      0.7      2.2  	for i in xrange(len(l)-1, 0, -1):
   552     20610        28974      1.4      4.2  		l[i] = (inv * l[i-1]) % n
   553     20610        27495      1.3      4.0  		inv = (inv * l_[i]) % n
   554       229          178      0.8      0.0  	l[0] = inv
   555                                           
   556       229          158      0.7      0.0  	return l

